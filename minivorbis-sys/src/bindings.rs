/* automatically generated by rust-bindgen 0.56.0 */

pub const OV_FALSE: i32 = -1;
pub const OV_EOF: i32 = -2;
pub const OV_HOLE: i32 = -3;
pub const OV_EREAD: i32 = -128;
pub const OV_EFAULT: i32 = -129;
pub const OV_EIMPL: i32 = -130;
pub const OV_EINVAL: i32 = -131;
pub const OV_ENOTVORBIS: i32 = -132;
pub const OV_EBADHEADER: i32 = -133;
pub const OV_EVERSION: i32 = -134;
pub const OV_ENOTAUDIO: i32 = -135;
pub const OV_EBADPACKET: i32 = -136;
pub const OV_EBADLINK: i32 = -137;
pub const OV_ENOSEEK: i32 = -138;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_off_t = __int64_t;
pub type ogg_int64_t = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oggpack_buffer {
    pub endbyte: ::std::os::raw::c_long,
    pub endbit: ::std::os::raw::c_int,
    pub buffer: *mut ::std::os::raw::c_uchar,
    pub ptr: *mut ::std::os::raw::c_uchar,
    pub storage: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_oggpack_buffer() {
    assert_eq!(
        ::std::mem::size_of::<oggpack_buffer>(),
        40usize,
        concat!("Size of: ", stringify!(oggpack_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<oggpack_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(oggpack_buffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oggpack_buffer>())).endbyte as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oggpack_buffer),
            "::",
            stringify!(endbyte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oggpack_buffer>())).endbit as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(oggpack_buffer),
            "::",
            stringify!(endbit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oggpack_buffer>())).buffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(oggpack_buffer),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oggpack_buffer>())).ptr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(oggpack_buffer),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oggpack_buffer>())).storage as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(oggpack_buffer),
            "::",
            stringify!(storage)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ogg_stream_state {
    pub body_data: *mut ::std::os::raw::c_uchar,
    pub body_storage: ::std::os::raw::c_long,
    pub body_fill: ::std::os::raw::c_long,
    pub body_returned: ::std::os::raw::c_long,
    pub lacing_vals: *mut ::std::os::raw::c_int,
    pub granule_vals: *mut ogg_int64_t,
    pub lacing_storage: ::std::os::raw::c_long,
    pub lacing_fill: ::std::os::raw::c_long,
    pub lacing_packet: ::std::os::raw::c_long,
    pub lacing_returned: ::std::os::raw::c_long,
    pub header: [::std::os::raw::c_uchar; 282usize],
    pub header_fill: ::std::os::raw::c_int,
    pub e_o_s: ::std::os::raw::c_int,
    pub b_o_s: ::std::os::raw::c_int,
    pub serialno: ::std::os::raw::c_long,
    pub pageno: ::std::os::raw::c_long,
    pub packetno: ogg_int64_t,
    pub granulepos: ogg_int64_t,
}
#[test]
fn bindgen_test_layout_ogg_stream_state() {
    assert_eq!(
        ::std::mem::size_of::<ogg_stream_state>(),
        408usize,
        concat!("Size of: ", stringify!(ogg_stream_state))
    );
    assert_eq!(
        ::std::mem::align_of::<ogg_stream_state>(),
        8usize,
        concat!("Alignment of ", stringify!(ogg_stream_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_stream_state>())).body_data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_stream_state),
            "::",
            stringify!(body_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_stream_state>())).body_storage as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_stream_state),
            "::",
            stringify!(body_storage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_stream_state>())).body_fill as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_stream_state),
            "::",
            stringify!(body_fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_stream_state>())).body_returned as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_stream_state),
            "::",
            stringify!(body_returned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_stream_state>())).lacing_vals as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_stream_state),
            "::",
            stringify!(lacing_vals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_stream_state>())).granule_vals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_stream_state),
            "::",
            stringify!(granule_vals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_stream_state>())).lacing_storage as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_stream_state),
            "::",
            stringify!(lacing_storage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_stream_state>())).lacing_fill as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_stream_state),
            "::",
            stringify!(lacing_fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_stream_state>())).lacing_packet as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_stream_state),
            "::",
            stringify!(lacing_packet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ogg_stream_state>())).lacing_returned as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_stream_state),
            "::",
            stringify!(lacing_returned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_stream_state>())).header as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_stream_state),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_stream_state>())).header_fill as *const _ as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_stream_state),
            "::",
            stringify!(header_fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_stream_state>())).e_o_s as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_stream_state),
            "::",
            stringify!(e_o_s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_stream_state>())).b_o_s as *const _ as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_stream_state),
            "::",
            stringify!(b_o_s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_stream_state>())).serialno as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_stream_state),
            "::",
            stringify!(serialno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_stream_state>())).pageno as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_stream_state),
            "::",
            stringify!(pageno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_stream_state>())).packetno as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_stream_state),
            "::",
            stringify!(packetno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_stream_state>())).granulepos as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_stream_state),
            "::",
            stringify!(granulepos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ogg_sync_state {
    pub data: *mut ::std::os::raw::c_uchar,
    pub storage: ::std::os::raw::c_int,
    pub fill: ::std::os::raw::c_int,
    pub returned: ::std::os::raw::c_int,
    pub unsynced: ::std::os::raw::c_int,
    pub headerbytes: ::std::os::raw::c_int,
    pub bodybytes: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ogg_sync_state() {
    assert_eq!(
        ::std::mem::size_of::<ogg_sync_state>(),
        32usize,
        concat!("Size of: ", stringify!(ogg_sync_state))
    );
    assert_eq!(
        ::std::mem::align_of::<ogg_sync_state>(),
        8usize,
        concat!("Alignment of ", stringify!(ogg_sync_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_sync_state>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_sync_state),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_sync_state>())).storage as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_sync_state),
            "::",
            stringify!(storage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_sync_state>())).fill as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_sync_state),
            "::",
            stringify!(fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_sync_state>())).returned as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_sync_state),
            "::",
            stringify!(returned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_sync_state>())).unsynced as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_sync_state),
            "::",
            stringify!(unsynced)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_sync_state>())).headerbytes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_sync_state),
            "::",
            stringify!(headerbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ogg_sync_state>())).bodybytes as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ogg_sync_state),
            "::",
            stringify!(bodybytes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vorbis_info {
    pub version: ::std::os::raw::c_int,
    pub channels: ::std::os::raw::c_int,
    pub rate: ::std::os::raw::c_long,
    pub bitrate_upper: ::std::os::raw::c_long,
    pub bitrate_nominal: ::std::os::raw::c_long,
    pub bitrate_lower: ::std::os::raw::c_long,
    pub bitrate_window: ::std::os::raw::c_long,
    pub codec_setup: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_vorbis_info() {
    assert_eq!(
        ::std::mem::size_of::<vorbis_info>(),
        56usize,
        concat!("Size of: ", stringify!(vorbis_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vorbis_info>(),
        8usize,
        concat!("Alignment of ", stringify!(vorbis_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_info>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_info),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_info>())).channels as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_info),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_info>())).rate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_info),
            "::",
            stringify!(rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_info>())).bitrate_upper as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_info),
            "::",
            stringify!(bitrate_upper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_info>())).bitrate_nominal as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_info),
            "::",
            stringify!(bitrate_nominal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_info>())).bitrate_lower as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_info),
            "::",
            stringify!(bitrate_lower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_info>())).bitrate_window as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_info),
            "::",
            stringify!(bitrate_window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_info>())).codec_setup as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_info),
            "::",
            stringify!(codec_setup)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vorbis_dsp_state {
    pub analysisp: ::std::os::raw::c_int,
    pub vi: *mut vorbis_info,
    pub pcm: *mut *mut f32,
    pub pcmret: *mut *mut f32,
    pub pcm_storage: ::std::os::raw::c_int,
    pub pcm_current: ::std::os::raw::c_int,
    pub pcm_returned: ::std::os::raw::c_int,
    pub preextrapolate: ::std::os::raw::c_int,
    pub eofflag: ::std::os::raw::c_int,
    pub lW: ::std::os::raw::c_long,
    pub W: ::std::os::raw::c_long,
    pub nW: ::std::os::raw::c_long,
    pub centerW: ::std::os::raw::c_long,
    pub granulepos: ogg_int64_t,
    pub sequence: ogg_int64_t,
    pub glue_bits: ogg_int64_t,
    pub time_bits: ogg_int64_t,
    pub floor_bits: ogg_int64_t,
    pub res_bits: ogg_int64_t,
    pub backend_state: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_vorbis_dsp_state() {
    assert_eq!(
        ::std::mem::size_of::<vorbis_dsp_state>(),
        144usize,
        concat!("Size of: ", stringify!(vorbis_dsp_state))
    );
    assert_eq!(
        ::std::mem::align_of::<vorbis_dsp_state>(),
        8usize,
        concat!("Alignment of ", stringify!(vorbis_dsp_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).analysisp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(analysisp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).vi as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(vi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).pcm as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(pcm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).pcmret as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(pcmret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).pcm_storage as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(pcm_storage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).pcm_current as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(pcm_current)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).pcm_returned as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(pcm_returned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).preextrapolate as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(preextrapolate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).eofflag as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(eofflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).lW as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(lW)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).W as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(W)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).nW as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(nW)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).centerW as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(centerW)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).granulepos as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(granulepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).sequence as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).glue_bits as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(glue_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).time_bits as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(time_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).floor_bits as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(floor_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).res_bits as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(res_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_dsp_state>())).backend_state as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_dsp_state),
            "::",
            stringify!(backend_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vorbis_block {
    pub pcm: *mut *mut f32,
    pub opb: oggpack_buffer,
    pub lW: ::std::os::raw::c_long,
    pub W: ::std::os::raw::c_long,
    pub nW: ::std::os::raw::c_long,
    pub pcmend: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
    pub eofflag: ::std::os::raw::c_int,
    pub granulepos: ogg_int64_t,
    pub sequence: ogg_int64_t,
    pub vd: *mut vorbis_dsp_state,
    pub localstore: *mut ::std::os::raw::c_void,
    pub localtop: ::std::os::raw::c_long,
    pub localalloc: ::std::os::raw::c_long,
    pub totaluse: ::std::os::raw::c_long,
    pub reap: *mut alloc_chain,
    pub glue_bits: ::std::os::raw::c_long,
    pub time_bits: ::std::os::raw::c_long,
    pub floor_bits: ::std::os::raw::c_long,
    pub res_bits: ::std::os::raw::c_long,
    pub internal: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_vorbis_block() {
    assert_eq!(
        ::std::mem::size_of::<vorbis_block>(),
        192usize,
        concat!("Size of: ", stringify!(vorbis_block))
    );
    assert_eq!(
        ::std::mem::align_of::<vorbis_block>(),
        8usize,
        concat!("Alignment of ", stringify!(vorbis_block))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).pcm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(pcm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).opb as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(opb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).lW as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(lW)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).W as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(W)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).nW as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(nW)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).pcmend as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(pcmend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).mode as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).eofflag as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(eofflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).granulepos as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(granulepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).sequence as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).vd as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(vd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).localstore as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(localstore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).localtop as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(localtop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).localalloc as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(localalloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).totaluse as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(totaluse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).reap as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(reap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).glue_bits as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(glue_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).time_bits as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(time_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).floor_bits as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(floor_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).res_bits as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(res_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_block>())).internal as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_block),
            "::",
            stringify!(internal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alloc_chain {
    pub ptr: *mut ::std::os::raw::c_void,
    pub next: *mut alloc_chain,
}
#[test]
fn bindgen_test_layout_alloc_chain() {
    assert_eq!(
        ::std::mem::size_of::<alloc_chain>(),
        16usize,
        concat!("Size of: ", stringify!(alloc_chain))
    );
    assert_eq!(
        ::std::mem::align_of::<alloc_chain>(),
        8usize,
        concat!("Alignment of ", stringify!(alloc_chain))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alloc_chain>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alloc_chain),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alloc_chain>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alloc_chain),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vorbis_comment {
    pub user_comments: *mut *mut ::std::os::raw::c_char,
    pub comment_lengths: *mut ::std::os::raw::c_int,
    pub comments: ::std::os::raw::c_int,
    pub vendor: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_vorbis_comment() {
    assert_eq!(
        ::std::mem::size_of::<vorbis_comment>(),
        32usize,
        concat!("Size of: ", stringify!(vorbis_comment))
    );
    assert_eq!(
        ::std::mem::align_of::<vorbis_comment>(),
        8usize,
        concat!("Alignment of ", stringify!(vorbis_comment))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_comment>())).user_comments as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_comment),
            "::",
            stringify!(user_comments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_comment>())).comment_lengths as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_comment),
            "::",
            stringify!(comment_lengths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_comment>())).comments as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_comment),
            "::",
            stringify!(comments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vorbis_comment>())).vendor as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vorbis_comment),
            "::",
            stringify!(vendor)
        )
    );
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._file as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._bf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lbfsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._cookie as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._close as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._read as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._seek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._write as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ub as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._extra as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ur as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ubuf as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._nbuf as *const _ as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._blksize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ov_callbacks {
    pub read_func: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            nmemb: usize,
            datasource: *mut ::std::os::raw::c_void,
        ) -> usize,
    >,
    pub seek_func: ::std::option::Option<
        unsafe extern "C" fn(
            datasource: *mut ::std::os::raw::c_void,
            offset: ogg_int64_t,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub close_func: ::std::option::Option<
        unsafe extern "C" fn(datasource: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub tell_func: ::std::option::Option<
        unsafe extern "C" fn(datasource: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_long,
    >,
}
#[test]
fn bindgen_test_layout_ov_callbacks() {
    assert_eq!(
        ::std::mem::size_of::<ov_callbacks>(),
        32usize,
        concat!("Size of: ", stringify!(ov_callbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<ov_callbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(ov_callbacks))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ov_callbacks>())).read_func as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ov_callbacks),
            "::",
            stringify!(read_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ov_callbacks>())).seek_func as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ov_callbacks),
            "::",
            stringify!(seek_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ov_callbacks>())).close_func as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ov_callbacks),
            "::",
            stringify!(close_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ov_callbacks>())).tell_func as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ov_callbacks),
            "::",
            stringify!(tell_func)
        )
    );
}
extern "C" {
    pub static mut OV_CALLBACKS_DEFAULT: ov_callbacks;
}
extern "C" {
    pub static mut OV_CALLBACKS_NOCLOSE: ov_callbacks;
}
extern "C" {
    pub static mut OV_CALLBACKS_STREAMONLY: ov_callbacks;
}
extern "C" {
    pub static mut OV_CALLBACKS_STREAMONLY_NOCLOSE: ov_callbacks;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct OggVorbis_File {
    pub datasource: *mut ::std::os::raw::c_void,
    pub seekable: ::std::os::raw::c_int,
    pub offset: ogg_int64_t,
    pub end: ogg_int64_t,
    pub oy: ogg_sync_state,
    pub links: ::std::os::raw::c_int,
    pub offsets: *mut ogg_int64_t,
    pub dataoffsets: *mut ogg_int64_t,
    pub serialnos: *mut ::std::os::raw::c_long,
    pub pcmlengths: *mut ogg_int64_t,
    pub vi: *mut vorbis_info,
    pub vc: *mut vorbis_comment,
    pub pcm_offset: ogg_int64_t,
    pub ready_state: ::std::os::raw::c_int,
    pub current_serialno: ::std::os::raw::c_long,
    pub current_link: ::std::os::raw::c_int,
    pub bittrack: f64,
    pub samptrack: f64,
    pub os: ogg_stream_state,
    pub vd: vorbis_dsp_state,
    pub vb: vorbis_block,
    pub callbacks: ov_callbacks,
}
#[test]
fn bindgen_test_layout_OggVorbis_File() {
    assert_eq!(
        ::std::mem::size_of::<OggVorbis_File>(),
        944usize,
        concat!("Size of: ", stringify!(OggVorbis_File))
    );
    assert_eq!(
        ::std::mem::align_of::<OggVorbis_File>(),
        8usize,
        concat!("Alignment of ", stringify!(OggVorbis_File))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).datasource as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(datasource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).seekable as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(seekable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).end as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).oy as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(oy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).links as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(links)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).offsets as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(offsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).dataoffsets as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(dataoffsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).serialnos as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(serialnos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).pcmlengths as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(pcmlengths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).vi as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(vi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).vc as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(vc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).pcm_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(pcm_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).ready_state as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(ready_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).current_serialno as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(current_serialno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).current_link as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(current_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).bittrack as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(bittrack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).samptrack as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(samptrack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).os as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(os)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).vd as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(vd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).vb as *const _ as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(vb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OggVorbis_File>())).callbacks as *const _ as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(OggVorbis_File),
            "::",
            stringify!(callbacks)
        )
    );
}
extern "C" {
    pub fn ov_clear(vf: *mut OggVorbis_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_fopen(
        path: *const ::std::os::raw::c_char,
        vf: *mut OggVorbis_File,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_open(
        f: *mut FILE,
        vf: *mut OggVorbis_File,
        initial: *const ::std::os::raw::c_char,
        ibytes: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_open_callbacks(
        datasource: *mut ::std::os::raw::c_void,
        vf: *mut OggVorbis_File,
        initial: *const ::std::os::raw::c_char,
        ibytes: ::std::os::raw::c_long,
        callbacks: ov_callbacks,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_test(
        f: *mut FILE,
        vf: *mut OggVorbis_File,
        initial: *const ::std::os::raw::c_char,
        ibytes: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_test_callbacks(
        datasource: *mut ::std::os::raw::c_void,
        vf: *mut OggVorbis_File,
        initial: *const ::std::os::raw::c_char,
        ibytes: ::std::os::raw::c_long,
        callbacks: ov_callbacks,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_test_open(vf: *mut OggVorbis_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_bitrate(vf: *mut OggVorbis_File, i: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ov_bitrate_instant(vf: *mut OggVorbis_File) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ov_streams(vf: *mut OggVorbis_File) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ov_seekable(vf: *mut OggVorbis_File) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ov_serialnumber(
        vf: *mut OggVorbis_File,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ov_raw_total(vf: *mut OggVorbis_File, i: ::std::os::raw::c_int) -> ogg_int64_t;
}
extern "C" {
    pub fn ov_pcm_total(vf: *mut OggVorbis_File, i: ::std::os::raw::c_int) -> ogg_int64_t;
}
extern "C" {
    pub fn ov_time_total(vf: *mut OggVorbis_File, i: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ov_raw_seek(vf: *mut OggVorbis_File, pos: ogg_int64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_pcm_seek(vf: *mut OggVorbis_File, pos: ogg_int64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_pcm_seek_page(vf: *mut OggVorbis_File, pos: ogg_int64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_time_seek(vf: *mut OggVorbis_File, pos: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_time_seek_page(vf: *mut OggVorbis_File, pos: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_raw_seek_lap(vf: *mut OggVorbis_File, pos: ogg_int64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_pcm_seek_lap(vf: *mut OggVorbis_File, pos: ogg_int64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_pcm_seek_page_lap(vf: *mut OggVorbis_File, pos: ogg_int64_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_time_seek_lap(vf: *mut OggVorbis_File, pos: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_time_seek_page_lap(vf: *mut OggVorbis_File, pos: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_raw_tell(vf: *mut OggVorbis_File) -> ogg_int64_t;
}
extern "C" {
    pub fn ov_pcm_tell(vf: *mut OggVorbis_File) -> ogg_int64_t;
}
extern "C" {
    pub fn ov_time_tell(vf: *mut OggVorbis_File) -> f64;
}
extern "C" {
    pub fn ov_info(vf: *mut OggVorbis_File, link: ::std::os::raw::c_int) -> *mut vorbis_info;
}
extern "C" {
    pub fn ov_comment(vf: *mut OggVorbis_File, link: ::std::os::raw::c_int) -> *mut vorbis_comment;
}
extern "C" {
    pub fn ov_read_float(
        vf: *mut OggVorbis_File,
        pcm_channels: *mut *mut *mut f32,
        samples: ::std::os::raw::c_int,
        bitstream: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ov_read_filter(
        vf: *mut OggVorbis_File,
        buffer: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
        bigendianp: ::std::os::raw::c_int,
        word: ::std::os::raw::c_int,
        sgned: ::std::os::raw::c_int,
        bitstream: *mut ::std::os::raw::c_int,
        filter: ::std::option::Option<
            unsafe extern "C" fn(
                pcm: *mut *mut f32,
                channels: ::std::os::raw::c_long,
                samples: ::std::os::raw::c_long,
                filter_param: *mut ::std::os::raw::c_void,
            ),
        >,
        filter_param: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ov_read(
        vf: *mut OggVorbis_File,
        buffer: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
        bigendianp: ::std::os::raw::c_int,
        word: ::std::os::raw::c_int,
        sgned: ::std::os::raw::c_int,
        bitstream: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ov_crosslap(vf1: *mut OggVorbis_File, vf2: *mut OggVorbis_File)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_halfrate(
        vf: *mut OggVorbis_File,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ov_halfrate_p(vf: *mut OggVorbis_File) -> ::std::os::raw::c_int;
}
